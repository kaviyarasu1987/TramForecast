// Generated by Dagger (https://google.github.io/dagger).
package com.rim.tramforecast.data;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ForecastRepositoryModule_GetPhotoRepositoryFactory
    implements Factory<ForecastRepository> {
  private final ForecastRepositoryModule module;

  private final Provider<Context> contextProvider;

  public ForecastRepositoryModule_GetPhotoRepositoryFactory(
      ForecastRepositoryModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ForecastRepository get() {
    return provideInstance(module, contextProvider);
  }

  public static ForecastRepository provideInstance(
      ForecastRepositoryModule module, Provider<Context> contextProvider) {
    return proxyGetPhotoRepository(module, contextProvider.get());
  }

  public static ForecastRepositoryModule_GetPhotoRepositoryFactory create(
      ForecastRepositoryModule module, Provider<Context> contextProvider) {
    return new ForecastRepositoryModule_GetPhotoRepositoryFactory(module, contextProvider);
  }

  public static ForecastRepository proxyGetPhotoRepository(
      ForecastRepositoryModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.getPhotoRepository(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
