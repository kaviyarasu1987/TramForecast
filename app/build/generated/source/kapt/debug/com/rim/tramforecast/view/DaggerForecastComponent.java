// Generated by Dagger (https://google.github.io/dagger).
package com.rim.tramforecast.view;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.rim.tramforecast.data.ForecastRepository;
import com.rim.tramforecast.data.ForecastRepositoryConnector;
import com.rim.tramforecast.data.ForecastRepositoryModule;
import com.rim.tramforecast.data.ForecastRepositoryModule_GetPhotoRepositoryFactory;
import com.rim.tramforecast.data.ForecastViewModel;
import com.rim.tramforecast.data.GetForecast;
import com.rim.tramforecast.data.SchedulerFactory;
import com.rim.tramforecast.data.SchedulerFactoryModule;
import com.rim.tramforecast.data.SchedulerFactoryModule_SchedulerFactoryFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerForecastComponent implements ForecastComponent {
  private Provider<AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent.Builder>
      forecastFragmentSubcomponentBuilderProvider;

  private Provider<Application> seedInstanceProvider;

  private ForecastAppModule_GetContextFactory getContextProvider;

  private Provider<ForecastRepository> getPhotoRepositoryProvider;

  private Provider<SchedulerFactory> schedulerFactoryProvider;

  private DaggerForecastComponent(Builder builder) {

    initialize(builder);
  }

  public static ForecastComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        ForecastFragment.class, (Provider) forecastFragmentSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.forecastFragmentSubcomponentBuilderProvider =
        new Provider<
            AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent.Builder>() {
          @Override
          public AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent.Builder
              get() {
            return new ForecastFragmentSubcomponentBuilder();
          }
        };
    this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
    this.getContextProvider =
        ForecastAppModule_GetContextFactory.create(builder.forecastAppModule, seedInstanceProvider);
    this.getPhotoRepositoryProvider =
        DoubleCheck.provider(
            ForecastRepositoryModule_GetPhotoRepositoryFactory.create(
                builder.forecastRepositoryModule, getContextProvider));
    this.schedulerFactoryProvider =
        DoubleCheck.provider(
            SchedulerFactoryModule_SchedulerFactoryFactory.create(builder.schedulerFactoryModule));
  }

  @Override
  public void inject(Application arg0) {
    injectApplication(arg0);
  }

  private Application injectApplication(Application instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder extends ForecastComponent.Builder {
    private ForecastRepositoryModule forecastRepositoryModule;

    private ForecastAppModule forecastAppModule;

    private SchedulerFactoryModule schedulerFactoryModule;

    private Application seedInstance;

    @Override
    public ForecastComponent build() {
      if (forecastRepositoryModule == null) {
        this.forecastRepositoryModule = new ForecastRepositoryModule();
      }
      if (forecastAppModule == null) {
        this.forecastAppModule = new ForecastAppModule();
      }
      if (schedulerFactoryModule == null) {
        this.schedulerFactoryModule = new SchedulerFactoryModule();
      }
      Preconditions.checkBuilderRequirement(seedInstance, Application.class);
      return new DaggerForecastComponent(this);
    }

    @Override
    public void seedInstance(Application arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ForecastFragmentSubcomponentBuilder
      extends AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent.Builder {
    private ForecastFragment seedInstance;

    @Override
    public AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ForecastFragment.class);
      return new ForecastFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ForecastFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ForecastFragmentSubcomponentImpl
      implements AndroidBindingModule_GetForecastFragment.ForecastFragmentSubcomponent {
    private ForecastFragmentSubcomponentImpl(ForecastFragmentSubcomponentBuilder builder) {}

    private GetForecast getGetForecast() {
      return new GetForecast(DaggerForecastComponent.this.getPhotoRepositoryProvider.get());
    }

    private ForecastViewModel getForecastViewModel() {
      return new ForecastViewModel(
          new ForecastRepositoryConnector(),
          getGetForecast(),
          DaggerForecastComponent.this.schedulerFactoryProvider.get());
    }

    @Override
    public void inject(ForecastFragment arg0) {
      injectForecastFragment(arg0);
    }

    private ForecastFragment injectForecastFragment(ForecastFragment instance) {
      DaggerFragment1_MembersInjector.injectInjector(
          instance, DaggerForecastComponent.this.getDispatchingAndroidInjectorOfFragment2());
      ForecastFragment_MembersInjector.injectViewModel(instance, getForecastViewModel());
      return instance;
    }
  }
}
